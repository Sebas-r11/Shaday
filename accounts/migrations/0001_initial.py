# Generated by Django 4.2.24 on 2025-10-05 12:44

from decimal import Decimal
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('superadmin', 'SuperAdmin'), ('administrador', 'Administrador'), ('vendedor', 'Vendedor'), ('bodega', 'Bodega'), ('repartidor', 'Repartidor')], default='vendedor', max_length=20, verbose_name='Rol')),
                ('telefono', models.CharField(blank=True, max_length=20, null=True, verbose_name='Teléfono')),
                ('documento', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='Documento de identidad')),
                ('activo', models.BooleanField(default=True, verbose_name='Usuario activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('latitud', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True, verbose_name='Latitud GPS')),
                ('longitud', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True, verbose_name='Longitud GPS')),
                ('radio_cobertura_km', models.DecimalField(decimal_places=2, default=Decimal('10.0'), max_digits=5, verbose_name='Radio de cobertura (km)')),
                ('ubicacion_actualizada', models.DateTimeField(blank=True, null=True, verbose_name='Última actualización de ubicación')),
                ('disponible_entregas', models.BooleanField(default=True, verbose_name='Disponible para entregas')),
                ('zona_cobertura', models.CharField(blank=True, max_length=100, verbose_name='Zona de cobertura')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

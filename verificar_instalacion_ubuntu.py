#!/usr/bin/env python
"""
Script de verificaci√≥n de instalaci√≥n en Ubuntu
Verifica que todos los componentes funcionen correctamente
"""

import os
import sys
import subprocess
import platform

def verificar_python():
    """Verificar versi√≥n de Python"""
    print("üêç Verificando Python...")
    version = sys.version_info
    print(f"   Python {version.major}.{version.minor}.{version.micro}")
    
    if version.major != 3 or version.minor < 8:
        print("   ‚ùå ERROR: Se requiere Python 3.8 o superior")
        return False
    
    print("   ‚úÖ Versi√≥n de Python compatible")
    return True

def verificar_sistema():
    """Verificar sistema operativo"""
    print("\nüñ•Ô∏è Verificando Sistema...")
    sistema = platform.system()
    distribucion = platform.version()
    print(f"   Sistema: {sistema}")
    print(f"   Distribuci√≥n: {distribucion}")
    
    if "Ubuntu" in distribucion or "ubuntu" in distribucion:
        print("   ‚úÖ Ubuntu detectado")
        return True
    else:
        print("   ‚ö†Ô∏è No es Ubuntu, pero deber√≠a funcionar")
        return True

def verificar_dependencias():
    """Verificar dependencias de requirements.txt"""
    print("\nüì¶ Verificando dependencias...")
    
    try:
        import django
        print(f"   ‚úÖ Django {django.get_version()}")
    except ImportError:
        print("   ‚ùå Django no instalado")
        return False
    
    try:
        import reportlab
        print(f"   ‚úÖ ReportLab disponible")
    except ImportError:
        print("   ‚ùå ReportLab no instalado")
        return False
    
    try:
        import openpyxl
        print(f"   ‚úÖ OpenPyXL disponible")
    except ImportError:
        print("   ‚ùå OpenPyXL no instalado")
        return False
    
    try:
        import rest_framework
        print(f"   ‚úÖ Django REST Framework disponible")
    except ImportError:
        print("   ‚ùå Django REST Framework no instalado")
        return False
    
    return True

def verificar_base_datos():
    """Verificar configuraci√≥n de base de datos"""
    print("\nüóÑÔ∏è Verificando base de datos...")
    
    if os.path.exists('db.sqlite3'):
        print("   ‚úÖ Base de datos SQLite encontrada")
        return True
    else:
        print("   ‚ö†Ô∏è Base de datos no encontrada, ejecutar: python manage.py migrate")
        return False

def verificar_estructura_proyecto():
    """Verificar estructura del proyecto Django"""
    print("\nüìÅ Verificando estructura del proyecto...")
    
    carpetas_requeridas = [
        'accounts', 'inventario', 'ventas', 'compras', 'crm', 
        'templates', 'static', 'sistema_reyes'
    ]
    
    todas_ok = True
    for carpeta in carpetas_requeridas:
        if os.path.exists(carpeta):
            print(f"   ‚úÖ {carpeta}/")
        else:
            print(f"   ‚ùå {carpeta}/ no encontrada")
            todas_ok = False
    
    return todas_ok

def verificar_servidor():
    """Verificar que el servidor Django puede iniciarse"""
    print("\nüåê Verificando servidor Django...")
    
    try:
        # Verificar sintaxis b√°sica
        result = subprocess.run([
            sys.executable, 'manage.py', 'check'
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("   ‚úÖ Verificaci√≥n de Django exitosa")
            return True
        else:
            print(f"   ‚ùå Error en verificaci√≥n: {result.stderr}")
            return False
    except subprocess.TimeoutExpired:
        print("   ‚ùå Timeout en verificaci√≥n")
        return False
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
        return False

def mostrar_comandos_utiles():
    """Mostrar comandos √∫tiles para Ubuntu"""
    print("\nüõ†Ô∏è Comandos √∫tiles para Ubuntu:")
    print("   # Actualizar pip:")
    print("   python -m pip install --upgrade pip")
    print("   ")
    print("   # Instalar dependencias del sistema (si es necesario):")
    print("   sudo apt update")
    print("   sudo apt install python3-dev build-essential")
    print("   ")
    print("   # Reinstalar dependencias:")
    print("   pip install -r requirements.txt --force-reinstall")
    print("   ")
    print("   # Crear entorno virtual:")
    print("   python -m venv venv")
    print("   source venv/bin/activate")
    print("   ")
    print("   # Iniciar servidor:")
    print("   python manage.py runserver")

def main():
    """Funci√≥n principal"""
    print("=" * 60)
    print("üîç VERIFICACI√ìN DE INSTALACI√ìN - UBUNTU")
    print("=" * 60)
    
    verificaciones = [
        verificar_python(),
        verificar_sistema(),
        verificar_dependencias(),
        verificar_base_datos(),
        verificar_estructura_proyecto(),
        verificar_servidor()
    ]
    
    exitosas = sum(verificaciones)
    total = len(verificaciones)
    
    print("\n" + "=" * 60)
    print(f"üìä RESULTADO: {exitosas}/{total} verificaciones exitosas")
    
    if exitosas == total:
        print("‚úÖ ¬°Instalaci√≥n completamente funcional!")
        print("üöÄ Puedes ejecutar: python manage.py runserver")
    elif exitosas >= 4:
        print("‚ö†Ô∏è Instalaci√≥n mayormente funcional con advertencias")
        print("üí° Revisa las advertencias anteriores")
    else:
        print("‚ùå Instalaci√≥n con problemas importantes")
        print("üîß Sigue los comandos de soluci√≥n")
    
    mostrar_comandos_utiles()
    
    return exitosas == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
import os
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_reyes.settings')
django.setup()

from django.test import Client
from accounts.models import User
import json

print('üîç VALIDACI√ìN COMPLETA DE APIs CR√çTICAS')
print('=' * 60)

# Autenticar
client = Client()
user = User.objects.filter(is_superuser=True).first()
client.force_login(user)
print(f'‚úÖ Usuario autenticado: {user.username} (role: {user.role})')

# APIs cr√≠ticas a validar (URLs reales del sistema)
apis_criticas = [
    # Dashboard p√°ginas principales
    ('/accounts/dashboard/', 'Dashboard principal'),
    ('/ventas/', 'Dashboard ventas'),
    ('/analytics/', 'Dashboard analytics'),
    ('/inventario/', 'Dashboard inventario'),
    
    # APIs JSON de ventas
    ('/ventas/api/productos/', 'API b√∫squeda productos'),
    ('/ventas/api/clientes/', 'API b√∫squeda clientes'),
    ('/ventas/api/pedidos/pendientes/', 'API pedidos pendientes'),
    ('/ventas/api/estadisticas/ventas/', 'API estad√≠sticas ventas'),
    ('/ventas/api/verificar-stock/', 'API verificar stock'),
    
    # APIs JSON de inventario
    ('/inventario/api/subcategorias/', 'API subcategor√≠as'),
    ('/inventario/api/stock/', 'API stock'),
    ('/inventario/api/generar-recomendaciones/', 'API recomendaciones'),
    
    # APIs de analytics
    ('/analytics/api/prediccion/30/', 'API predicci√≥n producto'),
]

print()
print('üéØ PROBANDO APIs CR√çTICAS:')
print('-' * 40)

success_count = 0
total_apis = len(apis_criticas)

for url, descripcion in apis_criticas:
    try:
        response = client.get(url)
        
        if response.status_code == 200:
            content_type = response.get('Content-Type', '')
            
            if 'application/json' in content_type:
                try:
                    data = response.json()
                    print(f'‚úÖ {descripcion}: JSON v√°lido ({len(str(data))} chars)')
                    success_count += 1
                except json.JSONDecodeError:
                    print(f'‚ùå {descripcion}: JSON inv√°lido')
            elif 'text/html' in content_type:
                print(f'‚úÖ {descripcion}: HTML cargado ({len(response.content)} bytes)')
                success_count += 1
            else:
                print(f'‚ö†Ô∏è {descripcion}: Respuesta OK pero tipo inesperado ({content_type})')
                success_count += 1
                
        elif response.status_code == 302:
            print(f'üîÑ {descripcion}: Redirecci√≥n (posible flujo v√°lido)')
            success_count += 1
            
        elif response.status_code == 404:
            print(f'‚ùå {descripcion}: URL no encontrada (404)')
            
        elif response.status_code == 403:
            print(f'üö´ {descripcion}: Sin permisos (403)')
            
        else:
            print(f'‚ùå {descripcion}: Error {response.status_code}')
            
    except Exception as e:
        print(f'‚ùå {descripcion}: Excepci√≥n - {str(e)[:50]}...')

print()
print('üìä RESUMEN APIs CR√çTICAS:')
print('=' * 40)
print(f'‚úÖ APIs funcionando: {success_count}/{total_apis}')
print(f'üìà Porcentaje de √©xito: {(success_count/total_apis)*100:.1f}%')

if success_count >= total_apis * 0.8:
    print('‚úÖ Sistema API en buen estado')
elif success_count >= total_apis * 0.6:
    print('‚ö†Ô∏è Sistema API con problemas menores')
else:
    print('‚ùå Sistema API requiere atenci√≥n')

print()
print('üîß PR√ìXIMOS PASOS:')
print('   ‚ñ° Validar formularios principales')
print('   ‚ñ° Probar flujos de trabajo completos') 
print('   ‚ñ° Verificar permisos por roles')
print('   ‚ñ° Validar sistema de inventario')
print('   ‚ñ° Comprobar integridad de datos')
#!/usr/bin/env python
"""
Script para probar el formulario de subcategor√≠as y verificar el dropdown
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_reyes.settings')
django.setup()

from inventario.models import Categoria, Subcategoria
from django.template import Context, Template
from django.test import RequestFactory
from django.contrib.auth import get_user_model
from inventario.categorias_views import SubcategoriaCreateView

User = get_user_model()

def simular_formulario_subcategoria():
    print("üß™ SIMULANDO FORMULARIO DE SUBCATEGOR√çAS")
    print("=" * 50)
    
    # Crear usuario de prueba
    user = User.objects.filter(is_superuser=True).first()
    if not user:
        print("‚ùå No hay usuario administrador")
        return False
    
    # Simular request
    factory = RequestFactory()
    request = factory.get('/inventario/subcategorias/crear/')
    request.user = user
    
    # Instanciar vista
    view = SubcategoriaCreateView()
    view.request = request
    
    try:
        # Obtener contexto
        context = view.get_context_data()
        
        print(f"üìã CONTEXTO DEL FORMULARIO:")
        print(f"   - form: {context.get('form')}")
        print(f"   - categorias en contexto: {context.get('categorias')}")
        
        # Verificar categorias
        categorias = context.get('categorias')
        if categorias:
            print(f"\n‚úÖ CATEGOR√çAS DISPONIBLES ({categorias.count()}):")
            for categoria in categorias:
                print(f"   ‚Ä¢ ID: {categoria.id} | {categoria.nombre} | Activa: {categoria.activa}")
        else:
            print("\n‚ùå NO HAY CATEGOR√çAS EN EL CONTEXTO")
            
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        return False

def verificar_formulario_html():
    print("\nüîç VERIFICANDO TEMPLATE DE FORMULARIO")
    print("=" * 50)
    
    # Leer template
    try:
        with open('templates/inventario/subcategoria_form.html', 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Buscar la parte del dropdown
        if '{% for categoria in categorias %}' in content:
            print("‚úÖ El template est√° configurado para iterar sobre 'categorias'")
        else:
            print("‚ùå El template NO est√° configurado correctamente")
            
        if 'value="{{ categoria.pk }}"' in content:
            print("‚úÖ El template usa categoria.pk como value")
        else:
            print("‚ùå El template NO usa categoria.pk correctamente")
            
        if 'option value=""' in content:
            print("‚úÖ El template tiene opci√≥n por defecto")
        else:
            print("‚ùå El template NO tiene opci√≥n por defecto")
            
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR al leer template: {e}")
        return False

def probar_creacion_subcategoria():
    print("\nüÜï PROBANDO CREACI√ìN DE SUBCATEGOR√çA")
    print("=" * 50)
    
    # Buscar una categor√≠a para probar
    categoria = Categoria.objects.filter(activa=True).first()
    if not categoria:
        print("‚ùå No hay categor√≠as activas para probar")
        return False
    
    print(f"üìÅ Usando categor√≠a: {categoria.nombre} (ID: {categoria.id})")
    
    # Intentar crear subcategor√≠a
    try:
        subcategoria_test = Subcategoria(
            categoria=categoria,
            nombre="Test Subcategor√≠a Script",
            descripcion="Subcategor√≠a creada por script de prueba",
            activa=True
        )
        
        # Validar (no guardar a√∫n)
        subcategoria_test.full_clean()
        print("‚úÖ Validaci√≥n exitosa")
        
        # Verificar si ya existe
        if Subcategoria.objects.filter(categoria=categoria, nombre="Test Subcategor√≠a Script").exists():
            print("‚ö†Ô∏è La subcategor√≠a de prueba ya existe")
        else:
            subcategoria_test.save()
            print(f"‚úÖ Subcategor√≠a creada: {subcategoria_test}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR al crear subcategor√≠a: {e}")
        return False

def main():
    print("üîß DIAGN√ìSTICO COMPLETO: FORMULARIO SUBCATEGOR√çAS")
    print("=" * 60)
    
    resultados = []
    
    # 1. Verificar categor√≠as en BD
    categorias_count = Categoria.objects.filter(activa=True).count()
    print(f"üìä Categor√≠as activas en BD: {categorias_count}")
    resultados.append(categorias_count > 0)
    
    # 2. Simular formulario
    resultados.append(simular_formulario_subcategoria())
    
    # 3. Verificar template
    resultados.append(verificar_formulario_html())
    
    # 4. Probar creaci√≥n
    resultados.append(probar_creacion_subcategoria())
    
    # Resumen
    exitosos = sum(resultados)
    total = len(resultados)
    
    print("\n" + "=" * 60)
    print(f"üìà RESULTADO FINAL: {exitosos}/{total} pruebas exitosas")
    
    if exitosos == total:
        print("‚úÖ El formulario deber√≠a funcionar correctamente")
        print("üí° Si el dropdown sigue vac√≠o, puede ser un problema de cach√© o JavaScript")
    else:
        print("‚ùå Hay problemas detectados que deben corregirse")
        
    return exitosos == total

if __name__ == "__main__":
    success = main()
    
    if not success:
        print("\nüîß POSIBLES SOLUCIONES:")
        print("1. Limpiar cach√© del navegador")
        print("2. Verificar que la vista est√© pasando 'categorias' al contexto")
        print("3. Verificar que el template est√© accediendo correctamente al contexto")
        print("4. Probar con un navegador en modo inc√≥gnito")
    
    sys.exit(0 if success else 1)